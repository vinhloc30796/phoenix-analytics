version: '3.7'

networks:
  iceberg_net:
  redpanda_net:

volumes:
  minio_data:

services:
  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
      MINIO_DOMAIN: minio
    networks:
      iceberg_net:
        aliases:
          - demo-iceberg.minio
    volumes:
      - minio_data:/data
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: eu-west-1
    entrypoint: >
      /bin/sh -c "
          until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 5; done;
          /usr/bin/mc mb minio/demo-iceberg;
          /usr/bin/mc policy set public minio/demo-iceberg;
          tail -f /dev/null
      "    

  trino:
    image: trinodb/trino
    container_name: trino
    ports:
      - "8080:8080"
    networks:
      iceberg_net:
      redpanda_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./trino/catalog/iceberg.properties:/etc/trino/catalog/iceberg.properties
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: eu-west-1

  trino_init:
    build: ./initializer
    image: trino-init
    container_name: trino-init
    networks:
      iceberg_net:
    depends_on:
      trino:
        condition: service_healthy
    environment:
      # AUTH
      TRINO_HOST: trino
      TRINO_USER: admin
      TRINO_PASSWORD: password
      TRINO_CATALOG: iceberg

  postgres:
    image: postgres:latest
    container_name: postgres-iceberg
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: iceberg_catalog
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d iceberg_catalog"]
      interval: 5s
      timeout: 5s
      retries: 5

  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8181:8181
    environment:
      AWS_ACCESS_KEY_ID: admin
      AWS_SECRET_ACCESS_KEY: password
      AWS_REGION: eu-west-1
      CATALOG_WAREHOUSE: s3://demo-iceberg/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
      CATALOG_URI: jdbc:postgresql://postgres-iceberg/iceberg_catalog
      CATALOG_JDBC_USER: admin
      CATALOG_JDBC_PASSWORD: password

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.1
    container_name: redpanda
    hostname: redpanda
    command:
      - redpanda start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr redpanda:8082
      - --set redpanda.enable_transactions=true
      - --set redpanda.enable_idempotence=true
      - --set redpanda.auto_create_topics_enabled=true
    ports:
      - "9092:9092"
      - "8081:8081"
      - "8082:8082"
      - "9644:9644"
    networks:
      redpanda_net:

  console:
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
          # https://docs.redpanda.com/docs/manage/console/protobuf/#local-filesystem
          protobuf:
            enabled: true
            schemaRegistry:
              enabled: true
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8888:8080
    networks:
      redpanda_net:
    depends_on:
      - redpanda

  connect:
    image: docker.redpanda.com/redpandadata/connectors:v1.0.13
    hostname: connect
    container_name: connect
    networks:
      redpanda_net:
    #platform: 'linux/amd64'
    depends_on:
      - redpanda
    ports:
      - "8083:8083"
    environment:
      CONNECT_CONFIGURATION: |
        key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
        value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
        group.id=connectors-cluster
        offset.storage.topic=_internal_connectors_offsets
        config.storage.topic=_internal_connectors_configs
        status.storage.topic=_internal_connectors_status
        config.storage.replication.factor=-1
        offset.storage.replication.factor=-1
        status.storage.replication.factor=-1
        offset.flush.interval.ms=1000
        producer.linger.ms=50
        producer.batch.size=131072
      CONNECT_BOOTSTRAP_SERVERS: redpanda:9092
      CONNECT_GC_LOG_ENABLED: "false"
      CONNECT_HEAP_OPTS: -Xms512M -Xmx512M
      CONNECT_LOG_LEVEL: info
